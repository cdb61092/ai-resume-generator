generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  avatar        String?       @default("NULL")
  email         String        @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  profession    String?
  location      String?
  phoneNumber   String?
  linkedIn      String?
  github        String?
  education     Education[]
  languages     String[]
  frameworks    String[]
  tools         String[]
  libraries     String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobExperience UserJob[]
  projects      Project[]
  applications  Application[]
}

model Education {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  school         String
  location       String   @default("NULL")
  degree         String?
  graduationDate String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Job {
  id          Int          @id @default(autoincrement())
  jobId       String       @unique
  title       String
  description String
  salary      String?
  keywords    String[]
  company     String
  location    String
  source      Source
  careersPage String?
  application Application?
}

model UserJob {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  company          String
  title            String
  location         String
  startDate        String
  endDate          String
  responsibilities String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Project {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  bullets   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
  id            Int         @id @default(autoincrement())
  pdfData       String
  applicationId Int         @unique
  application   Application @relation(fields: [applicationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Application {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  job         Job          @relation(fields: [jobId], references: [id])
  jobId       Int          @unique
  coverLetter CoverLetter?
  resume      Resume?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CoverLetter {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int         @unique
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum Source {
  LinkedIn
  Indeed
}
