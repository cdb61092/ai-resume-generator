{
  "version": 3,
  "sources": ["../../../app/routes/profile.education.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\profile.education.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\profile.education.tsx\");\n  import.meta.hot.lastModified = \"1704512273656.8708\";\n}\n// REMIX HMR END\n\nimport { useForm, useFieldset, useFieldList, conform, list } from '@conform-to/react';\nimport { parse } from '@conform-to/zod';\nimport { Form, useLoaderData } from '@remix-run/react';\nimport React, { useRef } from 'react';\nimport { z } from 'zod';\nimport { Button, Input } from '@nextui-org/react';\nimport { authenticator } from '~/utils/auth.server';\nimport { prisma } from '~/utils/prisma.server';\nimport invariant from 'tiny-invariant';\nimport { json } from '@remix-run/node';\nimport { capitalize } from '~/utils';\nconst schoolSchema = z.object({\n  id: z.number().optional(),\n  school: z.string(),\n  degree: z.string().optional(),\n  graduationDate: z.string().optional()\n});\nconst educationSchema = z.object({\n  schools: z.array(schoolSchema).nonempty()\n});\nexport async function loader({\n  request\n}) {\n  let authUser = await authenticator.isAuthenticated(request);\n  invariant(authUser, 'User is not authenticated');\n  const education = await prisma.education.findMany({\n    where: {\n      userId: authUser.id\n    }\n  });\n  return json(education);\n}\nexport async function action({\n  request\n}) {\n  console.log('action');\n  let authUser = await authenticator.isAuthenticated(request);\n  invariant(authUser, 'User is not authenticated');\n  const formData = await request.formData();\n  const submission = parse(formData, {\n    schema: educationSchema\n  });\n  invariant(submission.value, 'Bad form values');\n  const {\n    schools\n  } = submission.value;\n  console.log(schools);\n  const allEducationIds = await prisma.education.findMany({\n    where: {\n      userId: authUser.id\n    },\n    select: {\n      id: true\n    }\n  }).then(results => results.map(result => result.id));\n  const upsertPromises = schools.map(school => prisma.education.upsert({\n    where: {\n      id: school.id ?? 0\n    },\n    update: {\n      school: school.school,\n      degree: school.degree,\n      graduationDate: school.graduationDate\n    },\n    create: {\n      userId: authUser.id,\n      school: school.school,\n      degree: school.degree,\n      graduationDate: school.graduationDate\n    }\n  }));\n  const upsertedRecords = await Promise.all(upsertPromises);\n  const upsertedIds = upsertedRecords.map(record => record.id);\n  const deleteIds = allEducationIds.filter(id => !upsertedIds.includes(id));\n\n  // Delete unneeded records\n  const deletePromises = deleteIds.map(id => prisma.education.delete({\n    where: {\n      id\n    }\n  }));\n  await Promise.all(deletePromises);\n  return json({\n    education: upsertedRecords\n  });\n}\nexport default function EducationForm() {\n  _s();\n  const education = useLoaderData();\n  const [form, {\n    schools\n  }] = useForm({\n    onValidate({\n      formData\n    }) {\n      return parse(formData, {\n        schema: educationSchema\n      });\n    },\n    shouldValidate: 'onBlur',\n    defaultValue: {\n      schools: education\n    }\n  });\n  const schoolList = useFieldList(form.ref, schools);\n  console.log(education);\n  return <Form method=\"post\" {...form.props}>\n            {schoolList.map((school, index) => <SchoolFieldSet {...school} index={index} listName={schools.name} />)}\n            <button {...list.insert(schools.name)} className=\"w-full mb-4\">\n                <Button color=\"primary\" fullWidth>\n                    Add school\n                </Button>\n            </button>\n            <Button fullWidth color=\"success\" type=\"submit\">\n                Save\n            </Button>\n        </Form>;\n}\n_s(EducationForm, \"G/WGIYmm+JzmBsPT2tM6nKu/X4M=\", false, function () {\n  return [useLoaderData, useForm, useFieldList];\n});\n_c = EducationForm;\nfunction SchoolFieldSet({\n  listName,\n  index,\n  ...config\n}) {\n  _s2();\n  const ref = useRef(null);\n  const {\n    school,\n    degree,\n    graduationDate,\n    id\n  } = useFieldset(ref, config);\n  const [title, setTitle] = React.useState(school.defaultValue);\n  return <fieldset ref={ref} key={config.key} className=\"flex flex-col gap-4 mb-4\">\n            <div className=\"pl-3 flex justify-between items-baseline\">\n                <legend>{title ? capitalize(title) : 'New School'}</legend>\n                <button {...list.remove(listName, {\n        index\n      })}>\n                    <Button color=\"danger\">Delete</Button>\n                </button>\n            </div>\n            <input type=\"hidden\" {...conform.input(id)} />\n            <Input type=\"text\" {...conform.input(school)} onValueChange={value => setTitle(value)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" label=\"School\" placeholder=\"School\" />\n            <Input type=\"text\" {...conform.input(degree)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" label=\"Degree\" placeholder=\"Degree\" />\n            <Input type=\"text\" {...conform.input(graduationDate)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" label=\"Graduation Date\" placeholder=\"Graduation Date\" />\n        </fieldset>;\n}\n_s2(SchoolFieldSet, \"A88zL/F9MDaPUR6EnYccMUddo2c=\", false, function () {\n  return [useFieldset];\n});\n_c2 = SchoolFieldSet;\nvar _c, _c2;\n$RefreshReg$(_c, \"EducationForm\");\n$RefreshReg$(_c2, \"SchoolFieldSet\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "React"]
}
