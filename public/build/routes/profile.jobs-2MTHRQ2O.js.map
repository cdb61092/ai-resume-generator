{
  "version": 3,
  "sources": ["../../../app/routes/profile.jobs.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\profile.jobs.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\profile.jobs.tsx\");\n  import.meta.hot.lastModified = \"1705179168377.8164\";\n}\n// REMIX HMR END\n\nimport { parse } from '@conform-to/zod';\nimport { useForm, conform } from '@conform-to/react';\nimport { Button, Input, Tab, Tabs, Textarea } from '@nextui-org/react';\nimport React from 'react';\nimport { UpdateJobSchema } from '~/components/forms/schemas';\nimport invariant from 'tiny-invariant';\nimport { authenticator } from '~/utils/auth.server';\nimport { prisma } from '~/utils/prisma.server';\nimport { Form, useLoaderData } from '@remix-run/react';\nexport async function loader({\n  request\n}) {\n  console.log('request');\n  let user = await authenticator.isAuthenticated(request);\n  invariant(user, 'User is not authenticated');\n  const jobs = await prisma.userJob.findMany({\n    where: {\n      userId: user.id\n    }\n  });\n  return {\n    jobs\n  };\n}\nexport async function action({\n  request\n}) {\n  let user = await authenticator.isAuthenticated(request);\n  invariant(user, 'User is not authenticated');\n  const formData = await request.formData();\n  const submission = parse(formData, {\n    schema: UpdateJobSchema\n  });\n  invariant(submission.value, 'Bad form values');\n  const {\n    intent\n  } = submission.payload;\n  if ('delete' === intent) {\n    const {\n      id\n    } = submission.value;\n    await prisma.userJob.delete({\n      where: {\n        id: id\n      }\n    });\n    return null;\n  }\n  const {\n    company,\n    title,\n    location,\n    startDate,\n    endDate,\n    responsibilities,\n    achievements,\n    id\n  } = submission.value;\n  await prisma.userJob.update({\n    where: {\n      id: id\n    },\n    data: {\n      company,\n      title,\n      location,\n      startDate,\n      endDate,\n      responsibilities\n    }\n  });\n  return null;\n}\nexport default function Experience() {\n  _s();\n  const {\n    jobs\n  } = useLoaderData();\n  const job = jobs[0];\n  console.log(jobs);\n  const [form, {\n    company,\n    title,\n    location,\n    startDate,\n    endDate,\n    achievements,\n    responsibilities,\n    id\n  }] = useForm({\n    // onValidate({formData}) {\n    //     return parse(formData, {schema: UpdateJobSchema});\n    // },\n    // shouldValidate: 'onBlur',\n    // onSubmit(event, { submission }) {\n    //     // invariant(submission.payload, 'Invalid payload')\n    //\n    //     const { intent } = submission.payload\n    //\n    //     if ('update' === intent) {\n    //         // return parse(submission.formData, { schema: UpdateJobSchema })\n    //     } else if ('delete' === intent) {\n    //         return {\n    //             id: submission.formData.get('id'),\n    //         }\n    //     }\n    // },\n  });\n  return <Tabs fullWidth>\n            {jobs.map(job => <Tab key={job.id} title={job.title}>\n                    <Form {...form.props} method=\"post\" navigate={false} className=\"flex flex-col gap-4\">\n                        <input type=\"hidden\" {...conform.input(id)} value={job.id} />\n                        <Input type=\"text\" label=\"Company\" {...conform.input(company)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.company} />\n                        <Input type=\"text\" label=\"Title\" {...conform.input(title)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.title} />\n                        <Input type=\"text\" label=\"Location\" {...conform.input(location)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.location} />\n                        <Input type=\"text\" label=\"Start Date\" {...conform.input(startDate)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.startDate} />\n                        <Input type=\"text\" label=\"End Date\" {...conform.input(endDate)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.endDate} />\n                        <Textarea label=\"Responsibilities\" {...conform.input(responsibilities)} className=\"border-none bg-[#f5f5f5] rounded-xl p-2\" defaultValue={job.responsibilities} />\n                        <Button color=\"success\" type=\"submit\" className=\"border-none text-[#1f2937] rounded-xl p-2\">\n                            Save\n                        </Button>\n                        <Button color=\"danger\" type=\"submit\" name=\"intent\" value=\"delete\" className=\"border-none text-[#1f2937] rounded-xl p-2\">\n                            Delete\n                        </Button>\n                    </Form>\n                </Tab>)}\n        </Tabs>;\n}\n_s(Experience, \"XrLEdEI3JE4SgO4qnRm6JqVxDzY=\", false, function () {\n  return [useLoaderData, useForm];\n});\n_c = Experience;\nvar _c;\n$RefreshReg$(_c, \"Experience\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["job"]
}
